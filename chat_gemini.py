import streamlit as st
import google.generativeai as genai
from dotenv import load_dotenv
import os
import json
import requests

# -------------------- KH·ªûI T·∫†O M√îI TR∆Ø·ªúNG --------------------
load_dotenv()
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

st.set_page_config(page_title="Gemini Chat", layout="wide")
st.title("Tsinghua No. 70 ChatAI: Learning Chinese Vocabulary")


# -------------------- H√ÄM L·∫§Y IP NG∆Ø·ªúI D√ôNG --------------------
def get_user_ip():
    try:
        ip = requests.get("https://api.ipify.org").text
        return ip
    except:
        return "unknown"


user_ip = get_user_ip()
st.caption(f"üåê ƒê·ªãa ch·ªâ IP c·ªßa b·∫°n: `{user_ip}`")


# -------------------- H√ÄM SINH PH·∫¢N H·ªíI C·ª¶A CHATBOT --------------------
def generate_bot_response(user_input):
    try:
        conversations = [
            {"role": msg["role"], "parts": [msg["content"]]}
            for msg in st.session_state.chat_history
        ]

        conversations.append({"role": "user", "parts": [user_input]})

        model = genai.GenerativeModel("gemini-2.0-flash")
        chat = model.start_chat(history=conversations)
        response = chat.send_message(user_input)

        return response.text
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói: {str(e)}"


# -------------------- H√ÄM L∆ØU L·ªäCH S·ª¨ CHAT --------------------
def save_chat_history(ip):
    filename = f"chat_history_{ip}.json"
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(st.session_state.chat_history, f, ensure_ascii=False, indent=2)


# -------------------- H√ÄM T·∫¢I L·ªäCH S·ª¨ CHAT --------------------
def load_chat_history(ip):
    filename = f"chat_history_{ip}.json"
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []


# -------------------- KH·ªûI T·∫†O SESSION STATE --------------------
if "chat_history" not in st.session_state:
    st.session_state.chat_history = load_chat_history(user_ip)


# -------------------- HI·ªÇN TH·ªä L·ªäCH S·ª¨ CHAT --------------------
for message in st.session_state.chat_history:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])


# -------------------- √î NH·∫¨P C√ÇU H·ªéI --------------------
prompt = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...")

if prompt:
    # L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng
    st.session_state.chat_history.append({"role": "user", "content": prompt})

    # Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
    with st.chat_message("user"):
        st.markdown(prompt)

    # G·ªçi h√†m ph·∫£n h·ªìi
    response = generate_bot_response(prompt)

    # Hi·ªÉn th·ªã ph·∫£n h·ªìi chatbot
    with st.chat_message("assistant"):
        st.markdown(response)

    # L∆∞u ph·∫£n h·ªìi v√†o l·ªãch s·ª≠
    st.session_state.chat_history.append({"role": "assistant", "content": response})

    # L∆∞u file theo IP
    save_chat_history(user_ip)


# -------------------- N√öT X√ìA L·ªäCH S·ª¨ --------------------
if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ chat"):
    st.session_state.chat_history = []
    filename = f"chat_history_{user_ip}.json"
    if os.path.exists(filename):
        os.remove(filename)
    st.rerun()
